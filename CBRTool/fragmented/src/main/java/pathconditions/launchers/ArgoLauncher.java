package pathconditions.launchers;

import static defs.Defs.*;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.Set;

import org.apache.log4j.Logger;

import com.ibm.wala.classLoader.IMethod;

import codegeneration.AtLeastOneConditionFactory;
import pathconditions.MetadataMethod;
import staticanalysis.JarAnalysis;
import utils.StaticAnalysisUtilities;

public class ArgoLauncher implements FragmentedLauncher {

	final static Logger logger = Logger.getLogger(ArgoLauncher.class);

	final String appJar = "../../ArgoUML.app/Contents/Resources/Java/argouml.jar";

	/** Point of entry */
	final List<String> interfaces = new ArrayList<String>(Arrays.asList("org.argouml.application.Main"));
	/** scope of the analysis */
	final List<String> monitoringScope = new ArrayList<String>(
			Arrays.asList(
					"org.argouml.uml.diagram.activity",
					"org.argouml.uml.diagram.activity.layout",
					"org.argouml.uml.diagram.activity.ui"
					)
			);

	/** steps to search */
	final int steps = 50;

	/** results */
	private Collection<MetadataMethod> results;

	private List<String> classPath;

	private Set<IMethod> analyzedMethods;

	private JarAnalysis jarAnalysis;

	public static void main(String[] args) {
		new ArgoLauncher();
	}

	public ArgoLauncher() {
		logger.debug("Starting ArgoLauncher...");
		launch();
	}

	@Override
	public void staticAnalysis() {
		jarAnalysis = new JarAnalysis(appJar,
				"../../ArgoUML.app/Contents/Resources/Java/");
		
		// set discovered methods
		jarAnalysis.makePackageAnalysis(monitoringScope);
		
		analyzedMethods = jarAnalysis.getAnalyzedMethods();

		// print methods collected from static analysis
		StaticAnalysisUtilities.printMethods(analyzedMethods);
	}

	@Override
	public void compilateConditions() {
		AtLeastOneConditionFactory atLeastCondition = new AtLeastOneConditionFactory(results);
		atLeastCondition.writeJavaClass();
	}

	@Override
	public void launch() {
		StaticAnalysisUtilities.delete(new File(jbseOutput));
		StaticAnalysisUtilities.delete(new File(fragmentedOutput));
		StaticAnalysisUtilities.delete(new File(serializedObjects));
		StaticAnalysisUtilities.delete(new File(autogeneratedEvaluators));
		
		// make CallGraph analysis
		staticAnalysis();

		// generate class path
		classPath = jarAnalysis.getClassPath();

		// produce LICS rules
		jarAnalysis.produceLICSRules();

		// symbolic execution
		results = makeSymbolicExecution(classPath, analyzedMethods, null, Arrays.asList("updateListeners"));

		// create java files with conditions for monitoring
		 compilateConditions();
	}

}
