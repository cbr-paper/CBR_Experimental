package runtime.evaluators.autogenerated;

import java.lang.ref.WeakReference;
import java.util.List;

import runtime.evaluators.AtLeastOneConditionEvaluator;

import java.util.Iterator;
public class FigPartition_1865463051 extends AtLeastOneConditionEvaluator {
	private Object currentObject;
	private String clsName;

	public FigPartition_1865463051(String clsName) {
		this.clsName = clsName;
	}

	public void monitor() throws ClassNotFoundException, NumberFormatException {

		currentObject = null;
		//currentObject =	 Class.forName(clsName).cast(currentObject); 
		currentObject = Class.forName(clsName, false,Thread.currentThread().getContextClassLoader()).cast(currentObject); 
 		if ( map.containsKey(clsName)) {
 			List<WeakReference<Object>> objectsList =	 map.get(clsName);
 			for (Iterator<WeakReference<Object>> it = objectsList.iterator();it.hasNext();) {
 				WeakReference<Object> object = it.next();
 				if (object.isEnqueued())
 					addQueuedObject(clsName, object);
 				else {
 					currentObject = object.get();
 					sfh.setCurrentStaticObject(currentObject);
 					fh.setCurrentObject(currentObject);

						String sV1 = expression("[java.lang.AbstractStringBuilder.sizeTable.length","int");
						Integer V1 = !sV1.isEmpty() ? Integer.parseInt(sV1) : null;
						String sV2 = expression("[java.lang.AbstractStringBuilder.sizeTable[0]","int");
						Integer V2 = !sV2.isEmpty() ? Integer.parseInt(sV2) : null;
						String sV3 = expression("[java.lang.AbstractStringBuilder.sizeTable[1]","int");
						Integer V3 = !sV3.isEmpty() ? Integer.parseInt(sV3) : null;

						getPartitionsFigPartition_1865463051_3(V1, V2);
						getPartitionsFigPartition_1865463051_10(V1, V2);
						getPartitionsFigPartition_1865463051_0(V1, V2);
						getPartitionsFigPartition_1865463051_11(V1, V2);
						getPartitionsFigPartition_1865463051_6(V1, V2, V3);
						getPartitionsFigPartition_1865463051_7(V1, V2, V3);
						getPartitionsFigPartition_1865463051_9(V1);
						getPartitionsFigPartition_1865463051_5();
						getPartitionsFigPartition_1865463051_1(V1, V2, V3);
						getPartitionsFigPartition_1865463051_8(V1);
						getPartitionsFigPartition_1865463051_2(V1, V2, V3);
						getPartitionsFigPartition_1865463051_4(V1);
				} 
			}
		}
	}

 private void getPartitionsFigPartition_1865463051_3(Integer V1, Integer V2) {

		String pathCondition = "getPartitionsFigPartition_1865463051_3";
		if(V1 == null || V2 == null){
		 Character val = values.get(pathCondition);
		 if (val.equals('U'))
		 values.put(pathCondition, 'U');
		 else if (val.equals('T'))
		 values.put(pathCondition, 'T');
		 else if (val.equals('F'))
		 values.put(pathCondition, 'F');
		} else if (V1 >= 0 && V1 > 0 && V2 < 0 && 1 >= V1){
		 values.put(pathCondition, 'T');
		} else {
		 Character val = values.get(pathCondition);
		 if (val.equals('F') || val.equals('U'))
		 values.put(pathCondition, 'F');
		 else
		 values.put(pathCondition, 'T');
		}
 }


 private void getPartitionsFigPartition_1865463051_10(Integer V1, Integer V2) {

		String pathCondition = "getPartitionsFigPartition_1865463051_10";
		if(V1 == null || V2 == null){
		 Character val = values.get(pathCondition);
		 if (val.equals('U'))
		 values.put(pathCondition, 'U');
		 else if (val.equals('T'))
		 values.put(pathCondition, 'T');
		 else if (val.equals('F'))
		 values.put(pathCondition, 'F');
		} else if (V1 >= 0 && V1 > 0 && V2 < 0 && 1 < V1){
		 values.put(pathCondition, 'T');
		} else {
		 Character val = values.get(pathCondition);
		 if (val.equals('F') || val.equals('U'))
		 values.put(pathCondition, 'F');
		 else
		 values.put(pathCondition, 'T');
		}
 }


 private void getPartitionsFigPartition_1865463051_0(Integer V1, Integer V2) {

		String pathCondition = "getPartitionsFigPartition_1865463051_0";
		if(V1 == null || V2 == null){
		 Character val = values.get(pathCondition);
		 if (val.equals('U'))
		 values.put(pathCondition, 'U');
		 else if (val.equals('T'))
		 values.put(pathCondition, 'T');
		 else if (val.equals('F'))
		 values.put(pathCondition, 'F');
		} else if (V1 >= 0 && V1 > 0 && V2 >= 0){
		 values.put(pathCondition, 'T');
		} else {
		 Character val = values.get(pathCondition);
		 if (val.equals('F') || val.equals('U'))
		 values.put(pathCondition, 'F');
		 else
		 values.put(pathCondition, 'T');
		}
 }


 private void getPartitionsFigPartition_1865463051_11(Integer V1, Integer V2) {

		String pathCondition = "getPartitionsFigPartition_1865463051_11";
		if(V1 == null || V2 == null){
		 Character val = values.get(pathCondition);
		 if (val.equals('U'))
		 values.put(pathCondition, 'U');
		 else if (val.equals('T'))
		 values.put(pathCondition, 'T');
		 else if (val.equals('F'))
		 values.put(pathCondition, 'F');
		} else if (V1 >= 0 && V1 > 0 && V2 < 0){
		 values.put(pathCondition, 'T');
		} else {
		 Character val = values.get(pathCondition);
		 if (val.equals('F') || val.equals('U'))
		 values.put(pathCondition, 'F');
		 else
		 values.put(pathCondition, 'T');
		}
 }


 private void getPartitionsFigPartition_1865463051_6(Integer V1, Integer V2, Integer V3) {

		String pathCondition = "getPartitionsFigPartition_1865463051_6";
		if(V1 == null || V2 == null || V3 == null){
		 Character val = values.get(pathCondition);
		 if (val.equals('U'))
		 values.put(pathCondition, 'U');
		 else if (val.equals('T'))
		 values.put(pathCondition, 'T');
		 else if (val.equals('F'))
		 values.put(pathCondition, 'F');
		} else if (V1 >= 0 && V1 > 0 && V2 < 0 && 1 < V1 && V3 < 0 && 2 < V1){
		 values.put(pathCondition, 'T');
		} else {
		 Character val = values.get(pathCondition);
		 if (val.equals('F') || val.equals('U'))
		 values.put(pathCondition, 'F');
		 else
		 values.put(pathCondition, 'T');
		}
 }


 private void getPartitionsFigPartition_1865463051_7(Integer V1, Integer V2, Integer V3) {

		String pathCondition = "getPartitionsFigPartition_1865463051_7";
		if(V1 == null || V2 == null || V3 == null){
		 Character val = values.get(pathCondition);
		 if (val.equals('U'))
		 values.put(pathCondition, 'U');
		 else if (val.equals('T'))
		 values.put(pathCondition, 'T');
		 else if (val.equals('F'))
		 values.put(pathCondition, 'F');
		} else if (V1 >= 0 && V1 > 0 && V2 < 0 && 1 < V1 && V3 < 0 && 2 >= V1){
		 values.put(pathCondition, 'T');
		} else {
		 Character val = values.get(pathCondition);
		 if (val.equals('F') || val.equals('U'))
		 values.put(pathCondition, 'F');
		 else
		 values.put(pathCondition, 'T');
		}
 }


 private void getPartitionsFigPartition_1865463051_9(Integer V1) {

		String pathCondition = "getPartitionsFigPartition_1865463051_9";
		if(V1 == null){
		 Character val = values.get(pathCondition);
		 if (val.equals('U'))
		 values.put(pathCondition, 'U');
		 else if (val.equals('T'))
		 values.put(pathCondition, 'T');
		 else if (val.equals('F'))
		 values.put(pathCondition, 'F');
		} else if (V1 >= 0){
		 values.put(pathCondition, 'T');
		} else {
		 Character val = values.get(pathCondition);
		 if (val.equals('F') || val.equals('U'))
		 values.put(pathCondition, 'F');
		 else
		 values.put(pathCondition, 'T');
		}
 }


 private void getPartitionsFigPartition_1865463051_5() {

		String pathCondition = "getPartitionsFigPartition_1865463051_5";
//		if(){
//		 Character val = values.get(pathCondition);
//		 if (val.equals('U'))
//		 values.put(pathCondition, 'U');
//		 else if (val.equals('T'))
//		 values.put(pathCondition, 'T');
//		 else if (val.equals('F'))
//		 values.put(pathCondition, 'F');
//		} else if (true){
//		 values.put(pathCondition, 'T');
//		} else {
//		 Character val = values.get(pathCondition);
//		 if (val.equals('F') || val.equals('U'))
//		 values.put(pathCondition, 'F');
//		 else
//		 values.put(pathCondition, 'T');
//		}
 }


 private void getPartitionsFigPartition_1865463051_1(Integer V1, Integer V2, Integer V3) {

		String pathCondition = "getPartitionsFigPartition_1865463051_1";
		if(V1 == null || V2 == null || V3 == null){
		 Character val = values.get(pathCondition);
		 if (val.equals('U'))
		 values.put(pathCondition, 'U');
		 else if (val.equals('T'))
		 values.put(pathCondition, 'T');
		 else if (val.equals('F'))
		 values.put(pathCondition, 'F');
		} else if (V1 >= 0 && V1 > 0 && V2 < 0 && 1 < V1 && V3 >= 0){
		 values.put(pathCondition, 'T');
		} else {
		 Character val = values.get(pathCondition);
		 if (val.equals('F') || val.equals('U'))
		 values.put(pathCondition, 'F');
		 else
		 values.put(pathCondition, 'T');
		}
 }


 private void getPartitionsFigPartition_1865463051_8(Integer V1) {

		String pathCondition = "getPartitionsFigPartition_1865463051_8";
		if(V1 == null){
		 Character val = values.get(pathCondition);
		 if (val.equals('U'))
		 values.put(pathCondition, 'U');
		 else if (val.equals('T'))
		 values.put(pathCondition, 'T');
		 else if (val.equals('F'))
		 values.put(pathCondition, 'F');
		} else if (V1 >= 0 && V1 > 0){
		 values.put(pathCondition, 'T');
		} else {
		 Character val = values.get(pathCondition);
		 if (val.equals('F') || val.equals('U'))
		 values.put(pathCondition, 'F');
		 else
		 values.put(pathCondition, 'T');
		}
 }


 private void getPartitionsFigPartition_1865463051_2(Integer V1, Integer V2, Integer V3) {

		String pathCondition = "getPartitionsFigPartition_1865463051_2";
		if(V1 == null || V2 == null || V3 == null){
		 Character val = values.get(pathCondition);
		 if (val.equals('U'))
		 values.put(pathCondition, 'U');
		 else if (val.equals('T'))
		 values.put(pathCondition, 'T');
		 else if (val.equals('F'))
		 values.put(pathCondition, 'F');
		} else if (V1 >= 0 && V1 > 0 && V2 < 0 && 1 < V1 && V3 < 0){
		 values.put(pathCondition, 'T');
		} else {
		 Character val = values.get(pathCondition);
		 if (val.equals('F') || val.equals('U'))
		 values.put(pathCondition, 'F');
		 else
		 values.put(pathCondition, 'T');
		}
 }


 private void getPartitionsFigPartition_1865463051_4(Integer V1) {

		String pathCondition = "getPartitionsFigPartition_1865463051_4";
		if(V1 == null){
		 Character val = values.get(pathCondition);
		 if (val.equals('U'))
		 values.put(pathCondition, 'U');
		 else if (val.equals('T'))
		 values.put(pathCondition, 'T');
		 else if (val.equals('F'))
		 values.put(pathCondition, 'F');
		} else if (V1 >= 0 && V1 <= 0){
		 values.put(pathCondition, 'T');
		} else {
		 Character val = values.get(pathCondition);
		 if (val.equals('F') || val.equals('U'))
		 values.put(pathCondition, 'F');
		 else
		 values.put(pathCondition, 'T');
		}
 }

}
